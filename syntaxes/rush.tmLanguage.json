{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Rush",
	"scopeName": "source.rush",
	"fileTypes": ["rush"],
	"patterns": [
		{ "include": "#global" },
		{ "include": "#declaration" },
		{ "include": "#statement" },
		{ "include": "#expression" }
	],
	"repository": {
		"global": {
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#preprocessor" },
				{ "include": "#string-literal" }
			]
		},
		"identifier": {
			"patterns": [
				{ "include": "#keywords" },
				{
					"name": "variable.name.rush",
					"match": "([_[:alpha:]][_[:alnum:]]*)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.$1.rush",
					"match": "(?<![_[:alnum:]])(if|else|switch|case|for|while|try|catch|finally|throw|import|export|break|continue|return|yield|pass)(?![_[:alnum:]])"
				},
				{
					"name": "storage.type.$1.rush",
					"match": "(?<![_[:alnum:]])(alias|var|let|func|enum|struct|class|record|interface|concept|module)(?![_[:alnum:]])"
				},
				{
					"name": "storage.modifier.$1.rush",
					"match": "(?<![_[:alnum:]])(const|extern|public|private|protected|virtual|override|static)(?![_[:alnum:]])"
				},
				{
					"name": "constant.language.$1.rush",
					"match": "(?<![_[:alnum:]])(nil|base|this|true|false|pass)(?![_[:alnum:]])"
				},
				{
					"name": "keyword.operator.new",
					"match": "(?<![_[:alnum:]])(?:new)(?![_[:alnum:]])"
				},
				{
					"name": "keyword.other.$1.rush",
					"match": "(?<![_[:alnum:]])(with|in|as|is|typeof|sizeof|default)(?![_[:alnum:]])"
				}
			]
		},
		"comment": {
			"patterns": [
				{ "include": "#block-comment" },
				{ "include": "#line-comment" }
			]
		},
		"line-comment": {
			"begin": "(\\s*)(##)",
			"end": "$",
			"beginCaptures": {
				"1": { "name": "punctuation.whitespace.comment.leading.rush" },
				"2": { "name": "comment.line.number-sign.rush" }
			},
			"patterns": [
				{
					"comment": "Line comment",
					"name": "comment.line.rush",
					"match": ".*(?=$)"
				}
			]
		},
		"block-comment": {
			"name": "comment.block.rush",
			"begin": "(\\s*)(###)(#*)",
			"end": "\\s*#*(###)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "punctuation.whitespace.comment.leading.rush" },
				"2": { "name": "comment.block.number-sign.rush" }
			}
		},
		"preprocessor": {
			"name": "meta.preprocessor.rush",
			"begin": "^(\\s*)(#)",
			"end": "(?=.)",
			"beginCaptures": {
				"2": { "name": "punctuation.separator.hash.rush" }
			}
		},
		"builtin-literal": {
			"match": "(?<![_[:alpha:]])(?:(this|base|true|false|nil))(?![_[:alnum:]])",
			"captures": {
				"1": { "name": "constant.language.$1.rush" }
			}
		},
		"explicit-generic-arguments": {
			"name": "meta.expression.generic-arguments.rush",
			"begin": "(?<=[_[:alnum:]])(<\\s*:)\\s*",
			"end": "\\s*(>)",
			"beginCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
			"endCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
			"patterns": [ { "include": "#type-list" } ]
		},
		"numeric-literal": {
			"patterns": [{
				"comment": "Integer literal (hexidecimal)",
				"name": "constant.numeric.hex.rush",
				"match": "\\b0(?:x|X)([0-9a-fA-F][0-9a-fA-F`]*(ul|UL|u|l|U|L)?)\\b"
			}, {
				"comment": "Integer literal (octal)",
				"name": "constant.numeric.octal.rush",
				"match": "\\b0(?:o|O)([0-7][0-7`]*(ul|UL|u|l|U|L)?)\\b"
			}, {
				"comment": "Integer literal (binary)",
				"name": "constant.numeric.binary.rush",
				"match": "\\b0(?:b|B)([01][01`]*(ul|UL|u|l|U|L)?)\\b"
			}, {
				"comment": "Integer literal (decimal)",
				"name": "constant.numeric.integer.rush",
				"match": "\\b(0|[1-9][0-9`]*)(?!\\.[^.])(ul|UL|u|l|U|L)?\\b"
			}, {
				"comment": "Floating point literal (fraction)",
				"name": "constant.numeric.floating-point.rush",
				"match": "\\b(0|[1-9][0-9`]*)\\.?([0-9][0-9`]*)?([eE][+-]?[0-9`]+)?[fF]?"
			}]
		},
		"string-literal": {
			"begin": "(?=\")",
			"end": "(?<=\")",
			"applyEndPatternLast": 1,
			"patterns": [
				{ "include": "#string-expression-template" },
				{
					"name": "string.quoted.double.rush",
					"begin": "(?<!})\"|(?<=})",
					"end": "\"|(?=\\${)",
					"patterns": [
						{ "include": "#string-identifier-template" },
						{ "name": "constant.character.escape.rush", "match": "\\\\." }
					]
				}
			]
		},
		"string-identifier-template": {
			"name": "meta.string.template.identifier.substitution.rush",
			"match": "(\\$)([_[:alpha:]][_[:alnum:]]*)",
			"captures": {
				"1": { "name": "punctuation.definition.template-expression.begin.rush" },
				"2": { "name": "variable.other.readwrite.rush" }
			}
		},
		"string-expression-template": {
			"name": "meta.string.template.expression.substitution.rush",
			"begin": "(\\${)",
			"end": "(})",
			"beginCaptures": {
				"1": { "name": "punctuation.definition.template-expression.begin.rush" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.definition.template-expression.end.rush" }
			},
			"patterns": [
				{
					"name": "meta.string.template.expression.format.rush",
					"begin": "\\s*(:)\\s*",
					"end": "(?=})",
					"beginCaptures": {
						"1": { "name": "punctuation.definition.template-expression.format.rush" }
					},
					"patterns": [
						{
							"name": "string.quoted.double.rush",
							"match": "[^}]+"
						}
					]
				},
				{ "include": "#expression" }
			]
		},
		"pattern": {
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#preprocessor" },
				{ "include": "#binding-pattern" },
				{ "include": "#array-destructure-pattern" },
				{ "include": "#object-destructure-pattern" },
				{ "include": "#type-annotation-pattern" },
				{ "include": "#discard-pattern" },
				{ "include": "#identifier" },
				{ "include": "#pattern-list" }
			]
		},
		"pattern-list": {
			"begin": "\\s*(?=,)",
			"end": "(?=\\s*[^,])",
			"patterns": [
				{
					"begin": "(,)\\s*",
					"end": "\\s*(?=.)",
					"beginCaptures": { "1": { "name": "punctuation.separator.comma.rush" } },
					"patterns": [ { "include": "#pattern" } ]
				}
			]
		},
		"discard-pattern": {
			"name": "variable.other.rush",
			"match": "\\b_\\b"
		},
		"array-destructure-pattern": {
			"name": "meta.pattern.array-destructure.rush",
			"begin": "(\\[)",
			"end": "(\\])",
			"beginCaptures": { "1": { "name": "punctuation.definition.array-destructure-pattern.start.rush" } },
			"endCaptures": { "1": { "name": "punctuation.definition.array-destructure-pattern.end.rush" } },
			"patterns": [ { "include": "#pattern" } ]
		},
		"object-destructure-pattern": {
			"name": "meta.pattern.object-destructure.rush",
			"begin": "({)\\s*",
			"end": "\\s*(})",
			"beginCaptures": { "1": { "name": "punctuation.definition.object-destructure-pattern.start.rush" } },
			"endCaptures": { "1": { "name": "punctuation.definition.object-destructure-pattern.end.rush" } },
			"patterns": [ { "include": "#pattern" } ]
		},
		"type-annotation-pattern": {
			"name": "meta.pattern.type-annotation.rush",
			"begin": "\\s*(:)\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": { "1": { "name": "punctuation.separator.colon.rush" } },
			"patterns": [ { "include": "#type" } ]
		},
		"return-type-annotation-pattern": {
			"name": "meta.pattern.type-annotation.rush",
			"begin": "\\s*(->)\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thin.rush" } },
			"patterns": [ { "include": "#type" } ]
		},
		"binding-pattern": {
			"name": "meta.pattern.binding.rush",
			"begin": "\\s*(=(?!>))\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "patterns": [ { "name": "keyword.operator.equals.rush" } ] }
			},
			"patterns": [
				{ "include": "#expression" }
			]
		},
		"lambda-pattern": {
			"name": "meta.pattern.lambda.rush",
			"begin": "([_[:alpha:]][_[:alnum:]]*)\\s*(?=\\()",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "patterns": [ { "include": "#identifier" } ] }
			},
			"patterns": [
				{ "include": "#lambda-expression" },
				{ "include": "#pattern" }
			]
		},
		"type": {
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#preprocessor" },
				{ "include": "#string-literal" },
				{ "include": "#type-storage-modifier" },
				{ "include": "#qualified-type" },
				{ "include": "#variadic-type" },
				{ "include": "#type-extension" },
				{ "include": "#optional-type" },
				{ "include": "#generic-type" },
				{ "include": "#function-type" },
				{ "include": "#user-type" },
				{ "include": "#tuple-type" },
				{ "include": "#array-type" },
				{ "include": "#builtin-type" }
			]
		},
		"type-list": {
			"name": "meta.type.list.rush",
			"begin": "(?=[\\[\\{\\(_[:alpha:]])",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"patterns": [
				{
					"begin": "(,)\\s*",
					"end": "\\s*(?!,)",
					"endCaptures": { "1": { "name": "punctuation.separator.comma.rush" } },
					"patterns": [ { "include": "#type" } ]
				},
				{ "include": "#type" }
			]
		},
		"builtin-type": {
			"name": "storage.type.built-in.primitive.rush",
			"match": "(?x) (?<![_[:alpha:]]) (?:(?:s?byte)|(?:u?(?:short|int|long))|float|double|char|string|bool|void) (?![_[:alnum:]])"
		},
		"user-type": {
			"name": "support.type.primitive.rush",
			"match": "(?!(?<![_[:alpha:]])(?:(?:s?byte)|(?:u?(?:short|int|long))|float|double|char|string|bool|void)(?![_[:alnum:]]))(?:[_[:alpha:]][_[:alnum:]]*)"
		},
		"type-extension": {
			"name": "punctuation.definition.type-extension.rush",
			"begin": "(?x) (?:(?<![_[:alnum:]]) (extends) (?![_[:alnum:]])|@) \\s*",
			"end": "(?=.|$)",
			"beginCaptures": {
				"1": { "name": "storage.type.$1.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=(?:extends|@)\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#type" } ]
				}
			]
		},
		"qualified-type": {
			"patterns": [
				{ "include": "#generic-qualified-type" },
				{
					"name": "meta.type.qualifier.rush",
					"match": "([_[:alpha:]][_[:alnum:]]*)\\s*(\\.)\\s*",
					"captures": {
						"1": { "name": "variable.other.rush" },
						"2": { "name": "punctuation.separator.period.rush" }
					}
				}
			]
		},
		"generic-qualified-type": {
			"name": "meta.type.generic.qualifier.rush",
			"match": "([_[:alpha:]][_[:alnum:]]*)\\s*(<.*>)\\s*(\\.)\\s*",
			"captures": {
				"1": { "name": "support.type.primitive.rush" },
				"2": { "patterns": [ { "include": "#generic-type" } ] },
				"3": { "name": "punctuation.separator.period.rush" }
			}
		},
		"optional-type": {
			"name": "punctuation.definition.optional-type.rush",
			"match": "\\s*\\?"
		},
		"variadic-type": {
			"name": "punctuation.definition.variadic-type.rush",
			"match": "\\.\\.\\.\\s*"
		},
		"type-storage-modifier": {
			"name": "meta.storage.modifier.$1.rush",
			"begin": "(?x) (?<![_[:alnum:]]) (ref|unsafe|const|mutable) (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"beginCaptures": {
				"1": { "name": "storage.type.$1.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=(ref|unsafe|const|mutable)\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#type" } ]
				}
			]
		},
		"array-type": {
			"name": "meta.type.array.rush",
			"begin": "(\\[)",
			"end": "(\\])",
			"beginCaptures": { "1": { "name": "punctuation.section.array.start.bracket.square.rush" } },
			"endCaptures": { "1": { "name": "punctuation.section.array.end.bracket.square.rush" } },
			"patterns": [
				{
					"name": "meta.type.array.rank.rush",
					"begin": "\\s*(:)\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": { "1": { "name": "punctuation.separator.colon.rush" } },
					"patterns": [
						{
							"match": "\\s*(,)\\s*",
							"captures": { "1": { "name": "punctuation.separator.comma.rush" } }
						},
						{ "include": "#expression" }
					]
				},
				{
					"name": "punctuation.separator.comma.rush",
					"match": ","
				},
				{ "include": "#type" }
			]
		},
		"tuple-type": {
			"name": "meta.type.tuple.rush",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": { "1": { "name": "punctuation.section.tuple.start.bracket.round.rush" } },
			"endCaptures": { "1": { "name": "punctuation.section.tuple.end.bracket.round.rush" } },
			"patterns": [
				{
					"begin": "(?=[_[:alnum:]]+\\s*:)",
					"end": "(?=.)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#type-annotation-pattern" },
						{ "include": "#binding-pattern" },
						{ "include": "#identifier" }
					]
				},
				{ "include": "#type-list" },
				{
					"match": "\\s*(,)\\s*",
					"captures": { "1": { "name": "punctuation.separator.comma.rush" } }
				}
			]
		},
		"generic-type": {
			"name": "meta.type.generic.rush",
			"begin": "(?<=[[:alnum:]]_?)\\s*(<)",
			"end": "(>)",
			"beginCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
			"endCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.end.bracket.angle.rush" } },
			"patterns": [ { "include": "#type-list" } ]
		},
		"function-type": {
			"begin": "\\s*(->)\\s*",
			"end": "(?=.)",
			"applyEndPatternLast": 1,
			"beginCaptures": { "1": { "name": "punctuation.definition.function-type.rush" } },
			"patterns": [ { "include": "#type" } ]
		},
		"expression": {
			"patterns": [
				{ "include": "#global" },
				{ "include": "#string-literal" },
				{ "include": "#builtin-literal" },
				{ "include": "#numeric-literal" },
				{ "include": "#lambda-expression" },
				{ "include": "#parenthesis-expression" },
				{ "include": "#builtin-type" },
				{ "include": "#array-literal-expression" },
				{ "include": "#await-expression" },
				{ "include": "#default-expression" },
				{ "include": "#typeof-expression" },
				{ "include": "#nameof-expression" },
				{ "include": "#as-expression" },
				{ "include": "#is-expression" },
				{ "include": "#in-expression" },
				{ "include": "#not-expression" },
				{ "include": "#new-expression" },
				{ "include": "#ref-expression" },
				{ "include": "#invoke-expression" },
				{ "include": "#identifier-expression" },
				{ "include": "#explicit-generic-arguments" },
				{ "include": "#operator-expression" }
			]
		},
		"operator-expression": {
			"match": "\\s*(?!=>|->)(==?|:[:=]?|\\+[+=]?|-[-=]?|&[&=]?|\\|[|=]?|<[<=]?|>[>=]?|\\?[?=.]?|!\\.?|[*\\/%^~!]=?|\\.)\\s*",
			"captures": {
				"1": { "name": "keyword.operator.rush" }
			}
		},
		"default-expression": {
			"name": "meta.expression.$1.rush",
			"begin": "(?x) (?<![_[:alnum:]]) (\\bdefault\\b) (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.other.$1.rush" }
			},
			"patterns": [
				{
					"name": "meta.expression.default.type.rush",
					"begin": "(?x) (?<=default\\s*) (\\() \\s*",
					"end": "(?=.|$)|\\s*(\\))",
					"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.round.rush" } },
					"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.round.rush" } },
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#type" } ]
				}
			]
		},
		"lambda-expression": {
			"patterns": [
				{ "include": "#multiline-lambda-expression" },
				{ "include": "#inline-lambda-expression" }
			]
		},
		"lambda-expression-parameters": {
			"patterns": [
				{
					"begin": "(\\()",
					"end": "(\\))",
					"patterns": [ { "include": "#pattern" } ]
				},
				{
					"begin": "(?=\\[)",
					"end": "(?<=\\])",
					"patterns": [ { "include": "#array-destructure-pattern" } ]
				},
				{
					"begin": "(?=\\{)",
					"end": "(?<=\\})",
					"patterns": [ { "include": "#object-destructure-pattern" } ]
				},
				{ "include": "#discard-pattern" },
				{ "include": "#identifier" }
			]
		},
		"inline-lambda-expression": {
			"name": "meta.lambda.expression.rush",
			"begin": "(?<![_[:alnum:]])(async)(?![_[:alnum:]])\\s*([\\(\\[\\{].*[\\]\\)\\}]|[_[:alnum:]]*)\\s*(?:(->)\\s(.*))?\\s*(=>)\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "storage.modifier.specifier.$1.rush" },
				"2": { "patterns": [ { "include": "#lambda-expression-parameters" } ] },
				"3": { "name": "punctuation.separator.arrow.thin.rush" },
				"4": { "patterns": [ { "include": "#type" } ] },
				"5": { "name": "punctuation.separator.arrow.thick.rush" }
			},
			"patterns": [
				{
					"name": "meta.lambda.expression.body.rush",
					"begin": "(?<==>\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#expression" } ]
				}
			]
		},
		"multiline-lambda-expression": {
			"name": "meta.lambda.expression.rush",
			"begin": "(?<=^(\\s*).*)(?<![_[:alnum:]])(async)(?![_[:alnum:]])\\s*([\\(\\[\\{].*[\\]\\)\\}]|[_[:alnum:]]*)\\s*(?:(->)\\s(.*))?\\s*(=>)\\s*$",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": { "name": "storage.modifier.specifier.$1.rush" },
				"3": { "patterns": [ { "include": "#lambda-expression-parameters" } ] },
				"4": { "name": "punctuation.separator.arrow.thin.rush" },
				"5": { "patterns": [ { "include": "#type" } ] },
				"6": { "name": "punctuation.separator.arrow.thick.rush" }
			},
			"patterns": [
				{
					"name": "meta.lambda.expression.body.rush",
					"begin": "^(\\s*)",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [ { "include": "#statement" } ]
				}
			]
		},
		"parenthesis-expression": {
			"name": "meta.expression.parenthesis.rush",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": { "1": { "name": "punctuation.section.parenthesis.start.bracket.round.rush" }},
			"endCaptures": { "1": { "name": "punctuation.section.parenthesis.end.bracket.round.rush" } },
			"patterns": [ { "include": "#expression" } ]
		},
		"argument-list": {
			"name": "meta.argument.list.rush",
			"begin": "(?<=\\()",
			"end": "(?=\\))",
			"applyEndPatternLast": 1,
			"patterns": [
				{
					"match": "\\s*(,)\\s*",
					"captures": { "1": { "name": "punctuation.separator.comma.rush" } }
				},
				{ "include": "#expression" }
			]
		},
		"await-expression": {
			"name": "meta.expression.$1.rush",
			"match": "(?<![_[:alnum:]])(await)(?![_[:alnum:]])\\s*",
			"captures": { "1": { "name": "keyword.control.$1.rush" } }
		},
		"typeof-expression": {
			"name": "meta.expression.$1.rush",
			"match": "(?<![_[:alnum:]])(typeof)(?![_[:alnum:]])\\s*",
			"captures": { "1": { "name": "keyword.other.$1.rush" } }
		},
		"nameof-expression": {
			"name": "meta.expression.$1.rush",
			"match": "(?<![_[:alnum:]])(nameof)(?![_[:alnum:]])\\s*",
			"captures": { "1": { "name": "keyword.other.$1.rush" } }
		},
		"not-expression": {
			"name": "meta.expression.$2.rush",
			"match": "(?<![_[:alnum:]])(not)(?![_[:alnum:]])\\s*",
			"captures": { "1": { "name": "keyword.other.$1.rush" } }
		},
		"in-expression": {
			"name": "meta.expression.$2.rush",
			"match": "(?:(?<![_[:alnum:]])(not)(?![_[:alnum:]])\\s+)?(?<![_[:alnum:]])(in)(?![_[:alnum:]])\\s*",
			"captures": {
				"1": { "name": "keyword.other.$1.rush" },
				"2": { "name": "keyword.other.$2.rush" }
			}
		},
		"is-expression": {
			"name": "meta.expression.$1.rush",
			"begin": "\\s*(?<![_[:alnum:]])(is)(?![_[:alnum:]])(?:\\s+(?<![_[:alnum:]])(not)(?![_[:alnum:]]))?\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.other.$1.rush" },
				"2": { "name": "keyword.other.$2.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=(?:is|not)\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#type" }
					]
				}
			]
		},
		"as-expression": {
			"name": "meta.expression.$1.rush",
			"begin": "\\s*(?<![_[:alnum:]])(as)(\\?)?(?![_[:alnum:]])\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.other.$1.rush" },
				"2": { "name": "punctuation.operator.question_mark.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=as\\??\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#type" }
					]
				}
			]
		},
		"identifier-expression": {
			"name": "meta.expression.identifier.rush",
			"match": "([_[:alpha:]][_[:alnum:]]*)(?:\\s*(<\\s*:.*>))?",
			"captures": {
				"1": {
					"patterns": [
						{ "include": "#keywords" },
						{ "include": "#identifier" }
					]
				},
				"2": { "patterns": [ { "include": "#explicit-generic-arguments" } ] }
			}
		},
		"invoke-expression": {
			"name": "meta.function-call.rush",
			"begin": "([_[:alpha:]][_[:alnum:]]*)(?:\\s*(<\\s*:.*>))?\\s*(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{ "include": "#keywords" },
						{
							"name": "entity.name.function.rush",
							"match": ".*"
						}
					]
				},
				"2": { "patterns": [ { "include": "#explicit-generic-arguments" } ] },
				"3": { "name": "punctuation.section.arguments.start.bracket.round.rush" }
			},
			"endCaptures": {
				"1": { "name": "punctuation.section.arguments.end.bracket.round.rush" }
			},
			"patterns": [ { "include": "#argument-list" } ]
		},
		"new-expression": {
			"name": "meta.expression.new.rush",
			"begin": "(?<![_[:alnum:]])(new)(?![_[:alnum:]])\\s*(?:(?<![_[:alnum:]])(const|mutable)(?![_[:alnum:]])\\s*)?",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.operator.new.rush" },
				"2": { "name": "storage.type.$2.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=(?:new|const|mutable)\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#global" },
						{ "include": "#qualified-type" },
						{ "include": "#optional-type" },
						{ "include": "#generic-type" },
						{ "include": "#user-type" },
						{ "include": "#array-type" },
						{ "include": "#builtin-type" },
						{
							"name": "meta.argument.list.rush",
							"begin": "\\s*(\\()",
							"end": "(\\))",
							"patterns": [ { "include": "#argument-list" } ]
						},
						{
							"name": "meta.initializer.list.rush",
							"begin": "\\s*(?=\\[)",
							"end": "(?<=\\])",
							"patterns": [ { "include": "#array-literal-expression" } ]
						}
					]
				}
			]
		},
		"ref-expression": {
			"name": "meta.expression.$1.rush",
			"begin": "(?<![_[:alnum:]])(ref)(?![_[:alnum:]])\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "storage.modifier.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=ref\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#global" },
						{ "include": "#expression" }
					]
				}
			]
		},
		"array-literal-expression": {
			"name": "meta.expression.array-literal.rush",
			"begin": "(\\[)",
			"end": "(\\])",
			"beginCaptures": { "1": { "name": "punctuation.section.parenthesis.start.bracket.square.rush" } },
			"endCaptures": { "1": { "name": "punctuation.section.parenthesis.end.bracket.square.rush" } },
			"patterns": [
				{
					"begin": "(,)\\s*",
					"end": "\\s*(?=.)",
					"beginCaptures": { "1": { "name": "punctuation.separator.comma.rush" } },
					"patterns": [ { "include": "#expression" } ]
				},
				{ "include": "#expression" }
			]
		},
		"statement": {
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#preprocessor" },
				{ "include": "#control-statement" },
				{ "include": "#storage-declaration" },
				{ "include": "#function-declaration" },
				{ "include": "#expression" },
				{ "include": "#terminator" },
				{ "include": "#inline-statement" }
			]
		},
		"control-statement": {
			"patterns": [
				{ "include": "#try-statement" },
				{ "include": "#for-statement" },
				{ "include": "#control-transfer-statement" },
				{ "include": "#conditional-statement" },
				{ "include": "#else-statement" }
			]
		},
		"conditional-statement": {
			"name": "meta.control.statement.$1.rush",
			"begin": "(?x) (?<![_[:alnum:]]) (\\bif|while\\b) (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.control.$1.rush" }
			},
			"patterns": [
				{
					"contentName": "meta.control.statement.$1.condition.rush",
					"begin": "(?x) (?<=(if|while)\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{ "include": "#expression" },
						{
							"match": "\\s*(and|or)\\s*",
							"captures": { "1": { "name": "keyword.control.$1.rush" } }
						}
					]
				}
			]
		},
		"else-statement": {
			"name": "meta.control.statement.else.rush",
			"begin": "(?x) (?<![_[:alnum:]]) (\\belse\\b) (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.control.else.rush" }
			}
		},
		"for-statement": {
			"name": "meta.control.statement.for.rush",
			"begin": "(?x) (?<![_[:alnum:]]) \\b(for)\\b (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.control.for.rush" }
			},
			"patterns": [
				{
					"contentName": "meta.control.statement.for.expression.rush",
					"begin": "(?x) \\s* (?<![_[:alnum:]]) \\b(in)\\b (?![_[:alnum:]]) \\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": { "name": "keyword.control.in.rush" }
					},
					"patterns": [ { "include": "#expression" } ]
				},
				{
					"contentName": "meta.control.statement.for.pattern.rush",
					"begin": "(?x) (?<=for\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#pattern" } ]
				}
			]
		},
		"try-statement": {
			"name": "meta.control.statement.$2.rush",
			"begin": "(\\s*)(?:(?<![_$[:alnum:]])(\\belse\\b)(?![_$[:alnum:]])\\s*)?(?<![_$[:alnum:]])(\\btry)(?![_$[:alnum:]])(:)?",
			"end": "^(?!(?:\\1\\s+|\\s*[$#])|(?:\\1(?:catch|finally)))",
			"beginCaptures": {
				"2": { "name": "keyword.control.else.rush" },
				"3": { "name": "keyword.control.try.rush" },
				"4": { "name": "punctuation.separator.colon.rush" }
			},
			"patterns": [
				{ "include": "#statement" },
				{ "include": "#catch-statement" },
				{ "include": "#finally-statement" }
			]
		},
		"catch-statement": {
			"name": "meta.control.statement.$2.rush",
			"begin": "(\\s*)(?<![_$[:alnum:]])(\\bcatch)(?![_$[:alnum:]])",
			"end": "^(?!\\1\\s+|\\s*$|#)",
			"beginCaptures": {
				"2": { "name": "keyword.control.catch.rush" }
			},
			"patterns": [ { "include": "#statement" } ]
		},
		"finally-statement": {
			"name": "meta.control.statement.$2.rush",
			"begin": "(\\s*)(?<![_$[:alnum:]])(\\bfinally)(?![_$[:alnum:]])",
			"end": "^(?!\\1\\s+|\\s*$|#)",
			"beginCaptures": {
				"2": { "name": "keyword.control.finally.rush" }
			},
			"patterns": [ { "include": "#statement" } ]
		},
		"control-transfer-statement": {
			"name": "meta.control.statement.$1.rush",
			"match": "(?<![_[:alnum:]])(continue|break|return|yield|throw|await)(?![_[:alnum:]])",
			"captures": { "1": { "name": "keyword.control.$1.rush" } }
		},
		"declaration": {
			"patterns": [
				{ "include": "#import-declaration" },
				{ "include": "#namespace-declaration" },
				{ "include": "#annotation-declaration" },
				{ "include": "#storage-declaration" },
				{ "include": "#function-declaration" },
				{ "include": "#type-declaration" },
				{ "include": "#interface-declaration" },
				{ "include": "#export-declaration" },
				{ "include": "#function-modifier" },
				{ "include": "#storage-modifier" },
				{ "include": "#access-modifier" }
			]
		},
		"annotation-declaration": {
			"name": "meta.declaration.annotation.rush",
			"begin": "@",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "punctuation.definition.annotation.rush" }
			},
			"patterns": [
				{
					"name": "entity.name.type.rush",
					"match": "([_[:alpha:]][_[:alnum:]]*)"
				}
			]
		},
		"export-declaration": {
			"name": "meta.export.rush",
			"match": "(?:\\s*)(?<![_[:alpha:]])(export)(?![_[:alnum:]])(?:\\s*)",
			"captures": {
				"1": { "name": "keyword.control.export.rush" }
			}
		},
		"import-declaration": {
			"name": "meta.import.rush",
			"begin": "(?x)^(?<![_[:alnum:]])(import)(?![_[:alnum:]])\\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.control.import.rush" }
			},
			"patterns": [
				{
					"match": "([_.{}[:alnum:]]+)\\s*(?<![_[:alnum:]])(from)(?![_[:alnum:]])\\s*([_.[:alnum:]]+)?",
					"captures": {
						"1": { "name": "variable.name.rush" },
						"2": { "name": "keyword.control.from.rush" },
						"3": { "name": "entity.name.other.rush" }
					}
				},
				{
					"name": "entity.name.other.rush",
					"match": "([_.[:alnum:]]+)"
				}
			]
		},
		"namespace-declaration": {
			"name": "meta.namespace.rush",
			"match": "(?:\\s*)(?<!_?[[:alpha:]])(?:(\\bnamespace\\b))(?![_[:alnum:]])(?:\\s*([^;\"#]*))(;|$)?",
			"captures": {
				"1": { "name": "storage.type.namespace.rush" },
				"2": { "name": "entity.name.other.rush" },
				"3": { "name": "punctuation.import.optional.terminator.rush" }
			}
		},
		"storage-modifier": {
			"name": "storage.modifier.specifier.$1.rush",
			"match": "(?x) (?<![_[:alnum:]]) (static|extern) (?![_[:alnum:]])"
		},
		"access-modifier": {
			"name": "meta.access.modifier.rush",
			"match": "(?<![_[:alnum:]])(public|private|protected|internal)(?![_[:alnum:]])",
			"captures": { "1": { "name": "storage.type.modifier.access-control.$1.rush" } }
		},
		"function-modifier": {
			"match": "(?<![_[:alnum:]])(static|extern|virtual|override|abstract|async)((?<=override\\s*)\\!)?(?![_[:alnum:]])",
			"captures": {
				"1": { "name": "storage.modifier.specifier.$1.rush" },
				"2": { "name": "punctuation.operator.exclamation.rush" }
			}
		},
		"storage-declaration": {
			"name": "meta.storage.declaration.rush",
			"begin": "(?x) (?<![_[:alnum:]]) (let|var) (?![_[:alnum:]]) \\s*",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "storage.type.$1.rush" }
			},
			"patterns": [
				{ "include": "#lambda-pattern" },
				{ "include": "#pattern" }
			]
		},
		"subscript-operator-declaration": {
			"name": "meta.declaration.operator.rush",
			"begin": "(?x)^(\\s*)  ([_[:alpha:]][_[:alpha:]\\s]*)?  (?<![_[:alnum:]])(operator)(?![_[:alnum:]]) \\s* (?<![_[:alnum:]])(this)(?![_[:alnum:]]) \\s* (?=\\[)",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": { "patterns": [
					{ "include": "#function-modifier" },
					{ "include": "#access-modifier" }
				] },
				"3": { "name": "storage.type.operator.rush" },
				"4": { "name": "constant.language.$4.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.declaration.operator.subscript.rush",
					"begin": "(\\[)",
					"end": "(\\])",
					"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.square.rush" } },
					"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.square.rush" } },
					"patterns": [
						{ "include": "#global" },
						{ "include": "#pattern" }
					]
				},
				{
					"name": "meta.declaration.operator.return-type.rush",
					"begin": "\\s*(->)\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thin.rush" } },
					"patterns": [
						{ "include": "#global" },
						{ "include": "#type" }
					]
				},
				{
					"name": "meta.declaration.operator.subscipt.body.rush",
					"begin": "^(?=(\\s*))",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [ { "include": "#property-declaration" } ]
				}
			]
		},
		"operator-declaration": {
			"name": "meta.declaration.operator.rush",
			"begin": "(?x)^(\\s*)  ([_[:alpha:]][_[:alpha:]\\s]*)?  (?<![_[:alnum:]])(operator)(?![_[:alnum:]]) \\s*",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": { "patterns": [
					{ "include": "#function-modifier" },
					{ "include": "#access-modifier" }
				] },
				"3": { "name": "storage.type.operator.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.declaration.operator.head.rush",
					"begin": "(?x) (?<=operator\\s*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [
						{
							"match": "(?<![_[:alpha:]])(this)(?![_[:alnum:]])",
							"captures": {
								"1": { "name": "constant.language.$1.rush" }
							}
						},
						{
							"name": "meta.declaration.operator.parameters.rush",
							"begin": "\\s*(\\()",
							"end": "(\\))",
							"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.round.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.round.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#pattern" },
								{
									"name": "storage.type.var.rush",
									"match": "(?<![_[:alpha:]])(var)(?![_[:alnum:]])"
								}
							]
						},
						{
							"name": "meta.declaration.operator.expression-body.rush",
							"begin": "\\s*(=>)\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thick.rush" } },
							"patterns": [
								{
									"begin": "(?x) (?<=(?:=>)\\s*)",
									"end": "(?=.|$)",
									"applyEndPatternLast": 1,
									"patterns": [
										{ "include": "#expression" },
										{ "include": "#statement" }
									]
								}
							]
						},
						{
							"name": "meta.declaration.operator.return-type.rush",
							"begin": "\\s*(->)\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thin.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#type" }
							]
						},
						{ "include": "#operator-expression" }
					]
				},
				{
					"name": "meta.declaration.operator.body.rush",
					"begin": "^(\\s*)",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [ { "include": "#statement" } ]
				}
			]
		},
		"function-declaration": {
			"name": "meta.declaration.function.rush",
			"begin": "(?x)^(\\s*) ([_[:alpha:]][_[:alnum:]\\s\\!]*)? (?<![_[:alnum:]]) (func) (?![_[:alnum:]]) \\s*",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": {
					"patterns": [
						{ "include": "#export-declaration" },
						{ "include": "#function-modifier" },
						{ "include": "#access-modifier" }
					]
				},
				"3": { "name": "storage.type.function.rush" }
			},
			"patterns": [
				{ "include": "#comment" },
				{ "include": "#preprocessor" },
				{
					"name": "meta.declaration.function.head.rush",
					"begin": "(?<=func\\s*)(~\\s*)?([_[:alpha:]][_[:alnum:]]*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": { "name": "keyword.operator.tilde.rush" },
						"2": {
							"patterns": [
								{ "include": "#keywords" },
								{
									"name": "entity.name.function.rush",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#global" },
						{
							"name": "meta.declaration.function.generic-parameters.rush",
							"begin": "\\s*(<)",
							"end": "(>)",
							"beginCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.end.bracket.angle.rush" } },
							"patterns": [ { "include": "#type-list" } ]
						},
						{
							"name": "meta.declaration.function.parameters.rush",
							"begin": "\\s*(\\()",
							"end": "(\\))",
							"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.round.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.round.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#pattern" }
							]
						},
						{
							"name": "meta.constructor.declaration.intializer.rush",
							"begin": "\\s*(:)\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": { "1": { "name": "punctuation.separator.colon.rush" } },
							"patterns": [
								{
									"begin": "(?x) (?<=(?::)\\s*)",
									"end": "(?=.|$)",
									"applyEndPatternLast": 1,
									"patterns": [
										{ "include": "#invoke-expression" },
										{ "include": "#identifier" }
									]
								}
							]
						},
						{ "include": "#requires-clause" },
						{
							"name": "meta.declaration.function.expression-body.rush",
							"begin": "\\s*(=>)\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thick.rush" } },
							"patterns": [
								{
									"begin": "(?x) (?<=(?:=>)\\s*)",
									"end": "(?=.|$)",
									"applyEndPatternLast": 1,
									"patterns": [
										{ "include": "#expression" }
									]
								}
							]
						},
						{
							"name": "meta.declaration.function.return-type.rush",
							"begin": "\\s*(->)\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thin.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#type" }
							]
						}
					]
				},
				{
					"name": "meta.declaration.function.body.rush",
					"begin": "^(?=(\\s*))",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [
						{ "include": "#statement" },
						{ "include": "#requires-clause" }
					]
				}
			]
		},
		"property-declaration": {
			"patterns": [
				{ "include": "#get-property-declaration" },
				{ "include": "#set-property-declaration" }
			]
		},
		"get-property-declaration": {
			"name": "meta.property.get.declaration.rush",
			"begin": "(?x)^(\\s*) ([_[:alpha:]][_[:alpha:]\\s\\!]*)? (?<![_[:alnum:]]) (get) (?![_[:alnum:]]) \\s*",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": { "patterns": [
					{ "include": "#function-modifier" },
					{ "include": "#access-modifier" }
				] },
				"3": { "name": "storage.type.property.get.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.property.get.declaration.head.rush",
					"begin": "(?x) (?<=get\\s*) ([_[:alpha:]][_[:alnum:]]*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": {
							"patterns": [
								{ "include": "#keywords" },
								{
									"name": "variable.object.property.rush",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#type-annotation-pattern" },
						{
							"name": "meta.property.get.declaration.indexer.rush",
							"begin": "(\\[)",
							"end": "(\\])",
							"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.square.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.square.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#pattern" }
							]
						}
					]
				},
				{
					"name": "meta.property.get.declaration.expression-body.rush",
					"begin": "\\s*(=>)\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thick.rush" } },
					"patterns": [
						{
							"begin": "(?x) (?<=(?:=>)\\s*)",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"patterns": [
								{ "include": "#expression" }
							]
						}
					]
				},
				{
					"name": "meta.property.get.declaration.body.rush",
					"begin": "^(\\s*)",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [
						{ "include": "#statement" }
					]
				}
			]
		},
		"set-property-declaration": {
			"name": "meta.property.set.declaration.rush",
			"begin": "(?x)^(\\s*) ([_[:alpha:]][_[:alpha:]\\s\\!]*)? (?<![_[:alnum:]]) (set) (?![_[:alnum:]]) \\s*",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]))",
			"beginCaptures": {
				"2": { "patterns": [
					{ "include": "#function-modifier" },
					{ "include": "#access-modifier" }
				] },
				"3": { "name": "storage.type.property.set.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.property.set.declaration.head.rush",
					"begin": "(?x) (?<=set\\s*) ([_[:alpha:]][_[:alnum:]]*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": {
							"patterns": [
								{ "include": "#keywords" },
								{
									"name": "variable.object.property.rush",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#type-annotation-pattern" },
						{
							"name": "meta.property.set.declaration.indexer.rush",
							"begin": "(\\[)",
							"end": "(\\])",
							"beginCaptures": { "1": { "name": "punctuation.section.parameters.start.bracket.square.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.parameters.end.bracket.square.rush" } },
							"patterns": [
								{ "include": "#global" },
								{ "include": "#pattern" }
							]
						}
					]
				},
				{
					"name": "meta.property.set.declaration.expression-body.rush",
					"begin": "\\s*(=>)\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": { "1": { "name": "punctuation.separator.arrow.thick.rush" } },
					"patterns": [
						{
							"begin": "(?x) (?<=(?:=>)\\s*)",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"patterns": [
								{ "include": "#expression" }
							]
						}
					]
				},
				{
					"name": "meta.property.set.declaration.body.rush",
					"begin": "^(\\s*)",
					"end": "^(?!(?:\\1|\\s*$))",
					"patterns": [
						{ "include": "#statement" }
					]
				}
			]
		},
		"type-modifier": {
			"name": "storage.modifier.specifier.$1.rush",
			"match": "(?x) (?<![_[:alnum:]]) (static|base) (?![_[:alnum:]])"
		},
		"type-declaration": {
			"name": "meta.declaration.$3.rush",
			"begin": "(?x)^(\\s*) ([_[:alpha:]][_[:alpha:]\\s]*)? (?<![_[:alnum:]])(class|struct|record|implements)(?![_[:alnum:]]) \\s* (?:(?<![_[:alnum:]])(inherits|extends)(?![_[:alnum:]]) \\s*)?",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]|\\1(?<![_[:alnum:]])(?:public|private|protected|internal|inherits|implements)(?![_[:alnum:]])))",
			"beginCaptures": {
				"2": {
					"patterns": [
						{ "include": "#export-declaration" },
						{ "include": "#access-modifier" },
						{ "include": "#type-modifier" }
					]
				},
				"3": { "name": "storage.type.$3.rush" },
				"4": { "name": "storage.type.$4.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.declaration.$1.head.rush",
					"begin": "(?<=(class|struct|record|implements|inherits|extends)\\s*)(\\b[_[:alpha:]][_[:alnum:]]*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"2": {
							"patterns": [
								{ "include": "#keywords" },
								{
									"name": "entity.name.type.rush",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#global" },
						{
							"name": "meta.generic-parameters.rush",
							"begin": "\\s*(<)",
							"end": "(>)",
							"beginCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.end.bracket.angle.rush" } },
							"patterns": [ { "include": "#type-list" } ]
						},
						{
							"name": "meta.type.$1.rush",
							"begin": "\\s*(?<![_[:alnum:]])(inherits)(?![_[:alnum:]])\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": {
								"1": { "name": "storage.type.$1.rush" }
							},
							"patterns": [ { "include": "#type-list" } ]
						}
					]
				},
				{ "include": "#subscript-operator-declaration" },
				{ "include": "#operator-declaration" },
				{ "include": "#property-declaration" },
				{ "include": "#requires-clause" },
				{ "include": "#access-modifier" },
				{
					"name": "meta.type.extensions.rush",
					"begin": "\\s*(?<![_[:alnum:]])(inherits)(?![_[:alnum:]])\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": { "name": "storage.type.$1.rush" }
					},
					"patterns": [ { "include": "#type-list" } ]
				},
				{ "include": "#declaration" }
			]
		},
		"interface-declaration": {
			"name": "meta.declaration.$3.rush",
			"begin": "(?x)^(\\s*) ([_[:alpha:]][_[:alpha:]\\s]*)? (?<![_[:alnum:]])(interface)(?![_[:alnum:]]) \\s*",
			"end": "^(?!(?:\\1\\s+|\\s*[$#]|\\1(?<![_[:alnum:]])(?:inherits)(?![_[:alnum:]])))",
			"beginCaptures": {
				"2": {
					"patterns": [
						{ "include": "#export-declaration" },
						{ "include": "#access-modifier" },
						{ "include": "#type-modifier" }
					]
				},
				"3": { "name": "storage.type.$3.rush" }
			},
			"patterns": [
				{ "include": "#global" },
				{
					"name": "meta.declaration.$1.head.rush",
					"begin": "(?<=(interface)\\s*)(\\b[_[:alpha:]][_[:alnum:]]*)",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"2": {
							"patterns": [
								{ "include": "#keywords" },
								{
									"name": "entity.name.type.rush",
									"match": ".*"
								}
							]
						}
					},
					"patterns": [
						{ "include": "#global" },
						{
							"name": "meta.generic-parameters.rush",
							"begin": "\\s*(<)",
							"end": "(>)",
							"beginCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.start.bracket.angle.rush" } },
							"endCaptures": { "1": { "name": "punctuation.section.generic-type-parameters.end.bracket.angle.rush" } },
							"patterns": [ { "include": "#type-list" } ]
						},
						{
							"name": "meta.type.$1.rush",
							"begin": "\\s*(?<![_[:alnum:]])(inherits)(?![_[:alnum:]])\\s*",
							"end": "(?=.|$)",
							"applyEndPatternLast": 1,
							"beginCaptures": {
								"1": { "name": "storage.type.$1.rush" }
							},
							"patterns": [ { "include": "#type-list" } ]
						}
					]
				},
				{ "include": "#subscript-operator-declaration" },
				{ "include": "#operator-declaration" },
				{ "include": "#property-declaration" },
				{ "include": "#access-modifier" },
				{
					"name": "meta.type.extensions.rush",
					"begin": "\\s*(?<![_[:alnum:]])(inherits)(?![_[:alnum:]])\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"beginCaptures": {
						"1": { "name": "storage.type.$1.rush" }
					},
					"patterns": [ { "include": "#type-list" } ]
				},
				{ "include": "#declaration" }
			]
		},
		"requires-clause": {
			"name": "meta.declaration.requires.rush",
			"begin": "\\s*(?<![_[:alnum:]])(requires)(?![_[:alnum:]])",
			"end": "(?=.|$)",
			"applyEndPatternLast": 1,
			"beginCaptures": {
				"1": { "name": "keyword.other.requires.rush" }
			},
			"patterns": [
				{
					"begin": "(?<=requires)\\s*",
					"end": "(?=.|$)",
					"applyEndPatternLast": 1,
					"patterns": [ { "include": "#expression" } ]
				}
			]
		}
	}
}